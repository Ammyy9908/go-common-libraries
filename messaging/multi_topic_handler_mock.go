// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/zaws/multi_topic_handler.go

// Package mock_zaws is a generated GoMock package.
package zaws

import (
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIMultiTopicHandler is a mock of IMultiTopicHandler interface.
type MockIMultiTopicHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIMultiTopicHandlerMockRecorder
}

// MockIMultiTopicHandlerMockRecorder is the mock recorder for MockIMultiTopicHandler.
type MockIMultiTopicHandlerMockRecorder struct {
	mock *MockIMultiTopicHandler
}

// NewMockIMultiTopicHandler creates a new mock instance.
func NewMockIMultiTopicHandler(ctrl *gomock.Controller) *MockIMultiTopicHandler {
	mock := &MockIMultiTopicHandler{ctrl: ctrl}
	mock.recorder = &MockIMultiTopicHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMultiTopicHandler) EXPECT() *MockIMultiTopicHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIMultiTopicHandler) Handle(message types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIMultiTopicHandlerMockRecorder) Handle(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIMultiTopicHandler)(nil).Handle), message)
}

// RegisterHandler mocks base method.
func (m *MockIMultiTopicHandler) RegisterHandler(subject string, handlerFunc EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", subject, handlerFunc)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockIMultiTopicHandlerMockRecorder) RegisterHandler(subject, handlerFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockIMultiTopicHandler)(nil).RegisterHandler), subject, handlerFunc)
}
