// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/zaws/topic_publisher.go

// Package mock_zaws is a generated GoMock package.
package zaws

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITopicPublisher is a mock of ITopicPublisher interface.
type MockITopicPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockITopicPublisherMockRecorder
}

// MockITopicPublisherMockRecorder is the mock recorder for MockITopicPublisher.
type MockITopicPublisherMockRecorder struct {
	mock *MockITopicPublisher
}

// NewMockITopicPublisher creates a new mock instance.
func NewMockITopicPublisher(ctrl *gomock.Controller) *MockITopicPublisher {
	mock := &MockITopicPublisher{ctrl: ctrl}
	mock.recorder = &MockITopicPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITopicPublisher) EXPECT() *MockITopicPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockITopicPublisher) Publish(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockITopicPublisherMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockITopicPublisher)(nil).Publish), message)
}

// PublishEvent mocks base method.
func (m *MockITopicPublisher) PublishEvent(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockITopicPublisherMockRecorder) PublishEvent(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockITopicPublisher)(nil).PublishEvent), message)
}

// PublishEventWithAttributes mocks base method.
func (m *MockITopicPublisher) PublishEventWithAttributes(message string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventWithAttributes", message, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventWithAttributes indicates an expected call of PublishEventWithAttributes.
func (mr *MockITopicPublisherMockRecorder) PublishEventWithAttributes(message, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventWithAttributes", reflect.TypeOf((*MockITopicPublisher)(nil).PublishEventWithAttributes), message, attributes)
}

// PublishEventWithAttributesWithRetry mocks base method.
func (m *MockITopicPublisher) PublishEventWithAttributesWithRetry(message string, attributes map[string]string, opts ...Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{message, attributes}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishEventWithAttributesWithRetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventWithAttributesWithRetry indicates an expected call of PublishEventWithAttributesWithRetry.
func (mr *MockITopicPublisherMockRecorder) PublishEventWithAttributesWithRetry(message, attributes interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message, attributes}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventWithAttributesWithRetry", reflect.TypeOf((*MockITopicPublisher)(nil).PublishEventWithAttributesWithRetry), varargs...)
}

// PublishEventWithRetry mocks base method.
func (m *MockITopicPublisher) PublishEventWithRetry(message string, opts ...Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishEventWithRetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventWithRetry indicates an expected call of PublishEventWithRetry.
func (mr *MockITopicPublisherMockRecorder) PublishEventWithRetry(message interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventWithRetry", reflect.TypeOf((*MockITopicPublisher)(nil).PublishEventWithRetry), varargs...)
}

// PublishWithAttributes mocks base method.
func (m *MockITopicPublisher) PublishWithAttributes(message string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithAttributes", message, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithAttributes indicates an expected call of PublishWithAttributes.
func (mr *MockITopicPublisherMockRecorder) PublishWithAttributes(message, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithAttributes", reflect.TypeOf((*MockITopicPublisher)(nil).PublishWithAttributes), message, attributes)
}

// PublishWithAttributesWithRetry mocks base method.
func (m *MockITopicPublisher) PublishWithAttributesWithRetry(message string, attributes map[string]string, opts ...Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{message, attributes}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithAttributesWithRetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithAttributesWithRetry indicates an expected call of PublishWithAttributesWithRetry.
func (mr *MockITopicPublisherMockRecorder) PublishWithAttributesWithRetry(message, attributes interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message, attributes}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithAttributesWithRetry", reflect.TypeOf((*MockITopicPublisher)(nil).PublishWithAttributesWithRetry), varargs...)
}

// PublishWithRetry mocks base method.
func (m *MockITopicPublisher) PublishWithRetry(message string, opts ...Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithRetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithRetry indicates an expected call of PublishWithRetry.
func (mr *MockITopicPublisherMockRecorder) PublishWithRetry(message interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithRetry", reflect.TypeOf((*MockITopicPublisher)(nil).PublishWithRetry), varargs...)
}
