// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/zaws/topics_publisher.go

// Package mock_zaws is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITopicsPublisher is a mock of ITopicsPublisher interface.
type MockITopicsPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockITopicsPublisherMockRecorder
}

// MockITopicsPublisherMockRecorder is the mock recorder for MockITopicsPublisher.
type MockITopicsPublisherMockRecorder struct {
	mock *MockITopicsPublisher
}

// NewMockITopicsPublisher creates a new mock instance.
func NewMockITopicsPublisher(ctrl *gomock.Controller) *MockITopicsPublisher {
	mock := &MockITopicsPublisher{ctrl: ctrl}
	mock.recorder = &MockITopicsPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITopicsPublisher) EXPECT() *MockITopicsPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockITopicsPublisher) Publish(topicName, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topicName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockITopicsPublisherMockRecorder) Publish(topicName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockITopicsPublisher)(nil).Publish), topicName, message)
}

// PublishEvent mocks base method.
func (m *MockITopicsPublisher) PublishEvent(topicName, subject, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", topicName, subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockITopicsPublisherMockRecorder) PublishEvent(topicName, subject, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockITopicsPublisher)(nil).PublishEvent), topicName, subject, message)
}

// PublishEventWithAttributes mocks base method.
func (m *MockITopicsPublisher) PublishEventWithAttributes(topicName, subject, message string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventWithAttributes", topicName, subject, message, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventWithAttributes indicates an expected call of PublishEventWithAttributes.
func (mr *MockITopicsPublisherMockRecorder) PublishEventWithAttributes(topicName, subject, message, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventWithAttributes", reflect.TypeOf((*MockITopicsPublisher)(nil).PublishEventWithAttributes), topicName, subject, message, attributes)
}

// PublishWithAttributes mocks base method.
func (m *MockITopicsPublisher) PublishWithAttributes(topicName, message string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithAttributes", topicName, message, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithAttributes indicates an expected call of PublishWithAttributes.
func (mr *MockITopicsPublisherMockRecorder) PublishWithAttributes(topicName, message, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithAttributes", reflect.TypeOf((*MockITopicsPublisher)(nil).PublishWithAttributes), topicName, message, attributes)
}
