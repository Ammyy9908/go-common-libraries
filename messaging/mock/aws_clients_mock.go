// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/zaws/aws_clients.go

// Package mock_zaws is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sns "github.com/aws/aws-sdk-go-v2/service/sns"
	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
	gomock "github.com/golang/mock/gomock"
)

// MockISQSClient is a mock of ISQSClient interface.
type MockISQSClient struct {
	ctrl     *gomock.Controller
	recorder *MockISQSClientMockRecorder
}

// MockISQSClientMockRecorder is the mock recorder for MockISQSClient.
type MockISQSClientMockRecorder struct {
	mock *MockISQSClient
}

// NewMockISQSClient creates a new mock instance.
func NewMockISQSClient(ctrl *gomock.Controller) *MockISQSClient {
	mock := &MockISQSClient{ctrl: ctrl}
	mock.recorder = &MockISQSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQSClient) EXPECT() *MockISQSClientMockRecorder {
	return m.recorder
}

// CreateQueue mocks base method.
func (m *MockISQSClient) CreateQueue(ctx context.Context, params *sqs.CreateQueueInput, options ...func(*sqs.Options)) (*sqs.CreateQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueue", varargs...)
	ret0, _ := ret[0].(*sqs.CreateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockISQSClientMockRecorder) CreateQueue(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockISQSClient)(nil).CreateQueue), varargs...)
}

// DeleteMessage mocks base method.
func (m *MockISQSClient) DeleteMessage(ctx context.Context, params *sqs.DeleteMessageInput, options ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMessage", varargs...)
	ret0, _ := ret[0].(*sqs.DeleteMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockISQSClientMockRecorder) DeleteMessage(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockISQSClient)(nil).DeleteMessage), varargs...)
}

// GetQueueAttributes mocks base method.
func (m *MockISQSClient) GetQueueAttributes(ctx context.Context, params *sqs.GetQueueAttributesInput, options ...func(*sqs.Options)) (*sqs.GetQueueAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueAttributes", varargs...)
	ret0, _ := ret[0].(*sqs.GetQueueAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueAttributes indicates an expected call of GetQueueAttributes.
func (mr *MockISQSClientMockRecorder) GetQueueAttributes(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueAttributes", reflect.TypeOf((*MockISQSClient)(nil).GetQueueAttributes), varargs...)
}

// GetQueueUrl mocks base method.
func (m *MockISQSClient) GetQueueUrl(ctx context.Context, params *sqs.GetQueueUrlInput, options ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueUrl", varargs...)
	ret0, _ := ret[0].(*sqs.GetQueueUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueUrl indicates an expected call of GetQueueUrl.
func (mr *MockISQSClientMockRecorder) GetQueueUrl(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueUrl", reflect.TypeOf((*MockISQSClient)(nil).GetQueueUrl), varargs...)
}

// ReceiveMessage mocks base method.
func (m *MockISQSClient) ReceiveMessage(ctx context.Context, params *sqs.ReceiveMessageInput, options ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReceiveMessage", varargs...)
	ret0, _ := ret[0].(*sqs.ReceiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockISQSClientMockRecorder) ReceiveMessage(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockISQSClient)(nil).ReceiveMessage), varargs...)
}

// SendMessage mocks base method.
func (m *MockISQSClient) SendMessage(ctx context.Context, params *sqs.SendMessageInput, options ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*sqs.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockISQSClientMockRecorder) SendMessage(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockISQSClient)(nil).SendMessage), varargs...)
}

// SetQueueAttributes mocks base method.
func (m *MockISQSClient) SetQueueAttributes(ctx context.Context, params *sqs.SetQueueAttributesInput, options ...func(*sqs.Options)) (*sqs.SetQueueAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetQueueAttributes", varargs...)
	ret0, _ := ret[0].(*sqs.SetQueueAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetQueueAttributes indicates an expected call of SetQueueAttributes.
func (mr *MockISQSClientMockRecorder) SetQueueAttributes(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueAttributes", reflect.TypeOf((*MockISQSClient)(nil).SetQueueAttributes), varargs...)
}

// MockISNSClient is a mock of ISNSClient interface.
type MockISNSClient struct {
	ctrl     *gomock.Controller
	recorder *MockISNSClientMockRecorder
}

// MockISNSClientMockRecorder is the mock recorder for MockISNSClient.
type MockISNSClientMockRecorder struct {
	mock *MockISNSClient
}

// NewMockISNSClient creates a new mock instance.
func NewMockISNSClient(ctrl *gomock.Controller) *MockISNSClient {
	mock := &MockISNSClient{ctrl: ctrl}
	mock.recorder = &MockISNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISNSClient) EXPECT() *MockISNSClientMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockISNSClient) CreateTopic(ctx context.Context, params *sns.CreateTopicInput, options ...func(*sns.Options)) (*sns.CreateTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTopic", varargs...)
	ret0, _ := ret[0].(*sns.CreateTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockISNSClientMockRecorder) CreateTopic(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockISNSClient)(nil).CreateTopic), varargs...)
}

// Publish mocks base method.
func (m *MockISNSClient) Publish(ctx context.Context, params *sns.PublishInput, options ...func(*sns.Options)) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockISNSClientMockRecorder) Publish(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockISNSClient)(nil).Publish), varargs...)
}

// Subscribe mocks base method.
func (m *MockISNSClient) Subscribe(ctx context.Context, params *sns.SubscribeInput, options ...func(*sns.Options)) (*sns.SubscribeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*sns.SubscribeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockISNSClientMockRecorder) Subscribe(ctx, params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockISNSClient)(nil).Subscribe), varargs...)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageHandler) Handle(message types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageHandlerMockRecorder) Handle(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageHandler)(nil).Handle), message)
}
